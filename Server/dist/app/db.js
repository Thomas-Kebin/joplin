"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nodeEnv = process.env.NODE_ENV || 'development';
var knex = require('knex')({
    client: 'sqlite3',
    connection: {
        filename: __dirname + "/../../db-" + nodeEnv + ".sqlite",
    },
    useNullAsDefault: true,
    // Allow propery stack traces in case of an error, however
    // it has a small performance overhead so only enable in testing and dev
    asyncStackTraces: nodeEnv == 'development' || nodeEnv === 'testing',
});
exports.default = knex;
var ItemAddressingType;
(function (ItemAddressingType) {
    ItemAddressingType[ItemAddressingType["Id"] = 1] = "Id";
    ItemAddressingType[ItemAddressingType["Path"] = 2] = "Path";
})(ItemAddressingType = exports.ItemAddressingType || (exports.ItemAddressingType = {}));
var ItemType;
(function (ItemType) {
    ItemType[ItemType["File"] = 1] = "File";
    ItemType[ItemType["User"] = 2] = "User";
})(ItemType = exports.ItemType || (exports.ItemType = {}));
exports.databaseSchema = {
    users: {
        id: { type: 'string' },
        email: { type: 'string' },
        password: { type: 'string' },
        is_admin: { type: 'number' },
        updated_time: { type: 'number' },
        created_time: { type: 'number' },
    },
    sessions: {
        id: { type: 'string' },
        user_id: { type: 'string' },
        updated_time: { type: 'number' },
        created_time: { type: 'number' },
    },
    permissions: {
        id: { type: 'string' },
        user_id: { type: 'string' },
        item_type: { type: 'number' },
        item_id: { type: 'string' },
        is_owner: { type: 'number' },
        can_read: { type: 'number' },
        can_write: { type: 'number' },
        updated_time: { type: 'number' },
        created_time: { type: 'number' },
    },
    files: {
        id: { type: 'string' },
        name: { type: 'string' },
        content: { type: 'any' },
        mime_type: { type: 'string' },
        size: { type: 'number' },
        is_directory: { type: 'number' },
        is_root: { type: 'number' },
        parent_id: { type: 'string' },
        updated_time: { type: 'number' },
        created_time: { type: 'number' },
    },
};
// AUTO-GENERATED-TYPES

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxFQUFFLFFBQVEsRUFBRTtRQUM3QixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQ2hDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7S0FDaEM7Q0FDRCxDQUFBO0FBQ0QsdUJBQXVCIiwiZmlsZSI6ImRiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgS25leCBmcm9tICdrbmV4JztcblxuY29uc3Qgbm9kZUVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG5cbmxldCBrbmV4OktuZXggPSByZXF1aXJlKCdrbmV4Jykoe1xuXHRjbGllbnQ6ICdzcWxpdGUzJyxcblx0Y29ubmVjdGlvbjoge1xuXHRcdGZpbGVuYW1lOiBgJHtfX2Rpcm5hbWV9Ly4uLy4uL2RiLSR7bm9kZUVudn0uc3FsaXRlYCxcblx0fSxcblx0dXNlTnVsbEFzRGVmYXVsdDogdHJ1ZSxcblx0Ly8gQWxsb3cgcHJvcGVyeSBzdGFjayB0cmFjZXMgaW4gY2FzZSBvZiBhbiBlcnJvciwgaG93ZXZlclxuXHQvLyBpdCBoYXMgYSBzbWFsbCBwZXJmb3JtYW5jZSBvdmVyaGVhZCBzbyBvbmx5IGVuYWJsZSBpbiB0ZXN0aW5nIGFuZCBkZXZcblx0YXN5bmNTdGFja1RyYWNlczogbm9kZUVudiA9PSAnZGV2ZWxvcG1lbnQnIHx8IG5vZGVFbnYgPT09ICd0ZXN0aW5nJyxcblx0Ly8gZGVidWc6IG5vZGVFbnYgPT0gJ2RldmVsb3BtZW50JyB8fCBub2RlRW52ID09PSAndGVzdGluZycsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQga25leDtcblxuZXhwb3J0IGVudW0gSXRlbUFkZHJlc3NpbmdUeXBlIHtcblx0SWQgPSAxLFxuXHRQYXRoLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW1JZCB7XG5cdHZhbHVlOiBzdHJpbmdcblx0YWRkcmVzc2luZ1R5cGU6IEl0ZW1BZGRyZXNzaW5nVHlwZVxufVxuXG5leHBvcnQgZW51bSBJdGVtVHlwZSB7XG4gICAgRmlsZSA9IDEsXG4gICAgVXNlcixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaXRoRGF0ZXMge1xuXHR1cGRhdGVkX3RpbWU/OiBudW1iZXJcblx0Y3JlYXRlZF90aW1lPzogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l0aFV1aWQge1xuXHRpZD86IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgRGF0YWJhc2VUYWJsZUNvbHVtbiB7XG5cdHR5cGU6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgRGF0YWJhc2VUYWJsZSB7XG5cdFtrZXk6c3RyaW5nXTogRGF0YWJhc2VUYWJsZUNvbHVtblxufVxuXG5pbnRlcmZhY2UgRGF0YWJhc2VUYWJsZXMge1xuXHRba2V5OnN0cmluZ106IERhdGFiYXNlVGFibGVcbn1cblxuLy8gQVVUTy1HRU5FUkFURUQtVFlQRVNcbi8vIEF1dG8tZ2VuZXJhdGVkIHVzaW5nIGBucG0gcnVuIGdlbmVyYXRlLXR5cGVzYFxuZXhwb3J0IGludGVyZmFjZSBVc2VyIGV4dGVuZHMgV2l0aERhdGVzLCBXaXRoVXVpZCB7XG5cdGVtYWlsPzogc3RyaW5nXG5cdHBhc3N3b3JkPzogc3RyaW5nXG5cdGlzX2FkbWluPzogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvbiBleHRlbmRzIFdpdGhEYXRlcywgV2l0aFV1aWQge1xuXHR1c2VyX2lkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVybWlzc2lvbiBleHRlbmRzIFdpdGhEYXRlcywgV2l0aFV1aWQge1xuXHR1c2VyX2lkPzogc3RyaW5nXG5cdGl0ZW1fdHlwZT86IEl0ZW1UeXBlXG5cdGl0ZW1faWQ/OiBzdHJpbmdcblx0aXNfb3duZXI/OiBudW1iZXJcblx0Y2FuX3JlYWQ/OiBudW1iZXJcblx0Y2FuX3dyaXRlPzogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZSBleHRlbmRzIFdpdGhEYXRlcywgV2l0aFV1aWQge1xuXHRuYW1lPzogc3RyaW5nXG5cdGNvbnRlbnQ/OiBCdWZmZXJcblx0bWltZV90eXBlPzogc3RyaW5nXG5cdHNpemU/OiBudW1iZXJcblx0aXNfZGlyZWN0b3J5PzogbnVtYmVyXG5cdGlzX3Jvb3Q/OiBudW1iZXJcblx0cGFyZW50X2lkPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBkYXRhYmFzZVNjaGVtYTpEYXRhYmFzZVRhYmxlcyA9IHtcblx0dXNlcnM6IHtcblx0XHRpZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuXHRcdGVtYWlsOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG5cdFx0cGFzc3dvcmQ6IHsgdHlwZTogJ3N0cmluZycgfSxcblx0XHRpc19hZG1pbjogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHRcdHVwZGF0ZWRfdGltZTogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHRcdGNyZWF0ZWRfdGltZTogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHR9LFxuXHRzZXNzaW9uczoge1xuXHRcdGlkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG5cdFx0dXNlcl9pZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuXHRcdHVwZGF0ZWRfdGltZTogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHRcdGNyZWF0ZWRfdGltZTogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHR9LFxuXHRwZXJtaXNzaW9uczoge1xuXHRcdGlkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG5cdFx0dXNlcl9pZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuXHRcdGl0ZW1fdHlwZTogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHRcdGl0ZW1faWQ6IHsgdHlwZTogJ3N0cmluZycgfSxcblx0XHRpc19vd25lcjogeyB0eXBlOiAnbnVtYmVyJyB9LFxuXHRcdGNhbl9yZWFkOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdFx0Y2FuX3dyaXRlOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdFx0dXBkYXRlZF90aW1lOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdFx0Y3JlYXRlZF90aW1lOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdH0sXG5cdGZpbGVzOiB7XG5cdFx0aWQ6IHsgdHlwZTogJ3N0cmluZycgfSxcblx0XHRuYW1lOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG5cdFx0Y29udGVudDogeyB0eXBlOiAnYW55JyB9LFxuXHRcdG1pbWVfdHlwZTogeyB0eXBlOiAnc3RyaW5nJyB9LFxuXHRcdHNpemU6IHsgdHlwZTogJ251bWJlcicgfSxcblx0XHRpc19kaXJlY3Rvcnk6IHsgdHlwZTogJ251bWJlcicgfSxcblx0XHRpc19yb290OiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdFx0cGFyZW50X2lkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG5cdFx0dXBkYXRlZF90aW1lOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdFx0Y3JlYXRlZF90aW1lOiB7IHR5cGU6ICdudW1iZXInIH0sXG5cdH0sXG59XG4vLyBBVVRPLUdFTkVSQVRFRC1UWVBFU1xuIl19
