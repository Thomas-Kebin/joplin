apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.android.js",
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

	// To fix this error:
	// > java.io.UncheckedIOException: java.io.IOException: Execution of compression failed. java.lang.OutOfMemoryError
	// https://stackoverflow.com/q/57284812/561309
	dexOptions { javaMaxHeapSize "4g" }
    
    compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	defaultConfig {
		applicationId "net.cozic.joplin"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode 2097579
		versionName "1.2.2"
		ndk {
			abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
		}
		missingDimensionStrategy 'react-native-camera', 'general'
	}
	splits {
		abi {
			reset()
			enable enableSeparateBuildPerCPUArchitecture
			universalApk false  // If true, also generate a universal APK
			include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
		}
	}
	signingConfigs {
		debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
		release {
			if (project.hasProperty('JOPLIN_RELEASE_STORE_FILE')) {
				storeFile file(JOPLIN_RELEASE_STORE_FILE)
				storePassword JOPLIN_RELEASE_STORE_PASSWORD
				keyAlias JOPLIN_RELEASE_KEY_ALIAS
				keyPassword JOPLIN_RELEASE_KEY_PASSWORD
			}
		}
	}
	buildTypes {
		debug {
            signingConfig signingConfigs.debug
        }
		release {
			// Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
			signingConfig signingConfigs.release
			minifyEnabled enableProguardInReleaseBuilds
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
		}
	}
	// applicationVariants are e.g. debug, release
	applicationVariants.all { variant ->
		variant.outputs.each { output ->
			// For each separate APK per architecture, set a unique version code as described here:
			// https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
			def abi = output.getFilter(OutputFile.ABI)
			if (abi != null) {  // null for the universal-debug, universal-release variants
				output.versionCodeOverride =
						versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
			}
		}
	}
	
}

dependencies {
	implementation "org.webkit:android-jsc:r241213"
    compile project(':react-native-push-notification')
    // implementation (project(':react-native-camera')) {
    // 	// This is required because com.google.firebase requires v16.0.x of com.google.android.gms
    // 	// while react-native-camera requires v15.x, which results in broken dependencies with
    // 	// this error message:
    // 	// 
    // 	// The library com.google.android.gms:play-services-base is being requested by various other libraries at [[15.0.1,15.0.1]], but resolves to 16.0.1
    // 	//
    // 	// For the record: found solution by removing all Firebase stuff here and running "gradlew.bat :app:dependencies"
    // 	// That shows that react-native-camera was the one requiring v15.0.1.
    //     exclude group: "com.google.android.gms"
    // }
	implementation project(':react-native-file-viewer')
	implementation project(':react-native-securerandom')
	implementation project(':react-native-fs')
	implementation project(':react-native-image-picker')
	implementation project(':react-native-vector-icons')
	implementation project(':react-native-fs')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:28.0.0"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

	implementation project(':react-native-sqlite-storage')
	implementation project(':rn-fetch-blob')
	implementation project(':react-native-document-picker')
	implementation project(':react-native-image-resizer')
	// implementation project(':react-native-share-extension')
	implementation project(':react-native-version-info')
	implementation project(':react-native-camera')
	implementation "com.facebook.react:react-native:+"
	implementation project(':react-native-quick-actions')

	// implementation "com.google.android.gms:play-services-base:16.0.1" // For Firebase
	// implementation 'me.leolin:ShortcutBadger:1.1.21@aar' // For Firebase - this line if you wish to use badge on Android

	// To fix the error below, which happened after adding react-native-camera.
	// Doesn't make any sense since rn-camera neither defines v26 nor 27 but
	// v25.0.2 in build.gradle, but anyway now it works ¯\_(ツ)_/¯
	// --------------------------------------------------------------------------------------
	// Fatal error
	// { Error: Command failed: ./gradlew assembleRelease -PbuildDir=build --console plain
	//
	// FAILURE: Build failed with an exception.
	//
	// * What went wrong:
	// Execution failed for task ':app:preReleaseBuild'.
	// > Android dependency 'com.android.support:support-v4' has different version for the compile (26.1.0) and runtime (27.1.1) classpath. You should manually set the same version via DependencyResolution
	// --------------------------------------------------------------------------------------
	// https://github.com/react-native-community/react-native-camera/issues/1532#issuecomment-386434771
	compile ("com.android.support:support-v4:26.0.1") {
        force = true //<-- force dependency resolution to 26.0.1 in my case
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
	from configurations.compile
	into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"