diff --git a/node_modules/slug/slug.js b/node_modules/slug/slug.js
index b40320b..2be9650 100644
--- a/node_modules/slug/slug.js
+++ b/node_modules/slug/slug.js
@@ -51,13 +51,31 @@
     throw new Error('String "' + str + '" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new')
   }
 
-  if (typeof window === 'undefined') {
+  if (typeof window !== 'undefined' && window.btoa) {
+    base64 = function (input) {
+      return btoa(unescape(encodeURIComponent(input)))
+    }
+  } else if (typeof Buffer !== 'undefined') {
     base64 = function (input) {
       return Buffer.from(input).toString('base64')
     }
   } else {
+    // Polyfill for environments that don't have any btoa or Buffer class (eg. React Native)
+    // Copied from https://github.com/davidchambers/Base64.js/blob/a121f75bb10c8dd5d557886c4b1069b31258d230/base64.js#L22
     base64 = function (input) {
-      return btoa(unescape(encodeURIComponent(input)))
+      var str = unescape(encodeURIComponent(input + ''))
+      for (
+        var block, charCode, idx = 0, map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', output = '';
+        str.charAt(idx | 0) || (map = '=', idx % 1);
+        output += map.charAt(63 & block >> 8 - idx % 1 * 8)
+      ) {
+        charCode = str.charCodeAt(idx += 3 / 4)
+        if (charCode > 0xFF) {
+          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.")
+        }
+        block = block << 8 | charCode
+      }
+      return output
     }
   }
 
